<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="RenamingObjects" xml:space="preserve">
    <value>Renaming {0} to a maximum name length of {1}</value>
  </data>
  <data name="ShortenNamesSection" xml:space="preserve">
    <value>Shorten Names</value>
  </data>
  <data name="ShortenNames" xml:space="preserve">
    <value>&amp;Shorten Names</value>
  </data>
  <data name="ShortenNamesAttributesOption" xml:space="preserve">
    <value>Shorten &amp;Attribute names to first {0} characters</value>
  </data>
  <data name="ShortenNamesObjectsOption" xml:space="preserve">
    <value>Shorten &amp;Object names to first {0} characters</value>
  </data>
  <data name="ShortenNamesTablesOption" xml:space="preserve">
    <value>Shorten &amp;Table &amp;&amp; Index names to first {0} characters</value>
  </data>
  <data name="ShortenNamesToolDescription" xml:space="preserve">
    <value>This tool allows you to shorten the names of attributes, tables, indexes, and other objects in the KB to the current significant name length in the corresponding category.

For example, if the 'Significant attribute name length' property is currently set to {0}, all attributes with longer names will be truncated to their first {0} characters. In the same way, names of tables and indexes will be truncated to the lenght specified by the 'Significant table name length' property, and other objects to the lenght specified in 'Significant object name length'.

Please select below for which categories of objects you want to shorten names.</value>
  </data>
  <data name="RenamedObjects" xml:space="preserve">
    <value>   - Renamed {0}/{1} {2}</value>
  </data>
  <data name="NotRenamed" xml:space="preserve">
    <value>no need to rename</value>
  </data>
  <data name="ProcessingObject" xml:space="preserve">
    <value>   Processing {0} '{1}'... </value>
  </data>
  <data name="Renamed" xml:space="preserve">
    <value>renamed to '{0}'</value>
  </data>
  <data name="FixProcsPrintSettings" xml:space="preserve">
    <value>&amp;Fix Procs Print Settings</value>
  </data>
  <data name="FixProcsSections" xml:space="preserve">
    <value>Fix Converted Procs</value>
  </data>
  <data name="FixProcsToolDescription" xml:space="preserve">
    <value>This tool allows you to fix Procedures and Reports that were converted from GeneXus Version 9.0

Please type below the names of objects to fix (separated by commas, spaces or lines):</value>
  </data>
  <data name="FixDateAttributesDescription" xml:space="preserve">
    <value>This tool allows you to fix Date Attributes to make sure they use the long date format.

Please type below the names of attributes to fix (separated by commas, spaces or lines):</value>
  </data>
  <data name="FixDateAttributesTitle" xml:space="preserve">
    <value>Fix Date Attributes</value>
  </data>
  <data name="FixDateVariablesDescription" xml:space="preserve">
    <value>This tool allows you to fix Date Variables in objects to make sure they use the long date format.

Please type below the pairs of {object, variable} names of variables to fix (separated by commas, spaces or lines):</value>
  </data>
  <data name="FixDateVariablesTitle" xml:space="preserve">
    <value>Fix Object Date Variables</value>
  </data>
  <data name="FixProcsTitle" xml:space="preserve">
    <value>Fix Converted Procs</value>
  </data>
  <data name="FixObjDescsDescriptions" xml:space="preserve">
    <value>This tool allows you to make sure Object Descriptions are no longer than 50 characters.

Please type below the name of tables to fix (or '*' to consider all Transaction, Procedures and Work Panels):</value>
  </data>
  <data name="FixObjDescsTitle" xml:space="preserve">
    <value>Fix Object Descriptions</value>
  </data>
  <data name="FixTblDescsDescriptions" xml:space="preserve">
    <value>This tool allows you to make sure Table Descriptions are no longer than 27 characters.

Please type below the name of tables to fix (or '*' to consider all tables):</value>
  </data>
  <data name="FixTblDescsTitle" xml:space="preserve">
    <value>Fix Table Descriptions</value>
  </data>
</root>